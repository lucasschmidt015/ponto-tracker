// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model companies {
  id          String @id @default(uuid()) @db.Uuid
  name        String @db.VarChar(120)
  email       String @db.VarChar(120)
  latitude    String @db.VarChar(25)
  longitude   String @db.VarChar(25)
  allowEntryOutOfRange Boolean @default(true)
  startTimeMorning DateTime
  startTimeAfternoon DateTime
  endTimeMorning DateTime
  endTimeAfternoon DateTime
  createdAt  DateTime @default(now()) 
  updatedAt  DateTime @updatedAt

  users users[]
}

model users {
  id String @id @default(uuid()) @db.Uuid
  name String @db.VarChar(120)
  email String @db.VarChar(200)
  password String @db.VarChar(120)
  companyId String @db.Uuid
  createdAt  DateTime @default(now()) 
  updatedAt  DateTime @updatedAt
  company companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  user_roles user_roles[]
  working_days_user  working_days[] @relation("WorkingDaysUser")
  working_days_approver  working_days[] @relation("WorkingDaysApprover")
}

model roles {
  id String @id @default(uuid()) @db.Uuid
  name String

  user_roles user_roles[]
}

model user_roles {
  id String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  roleId String @db.Uuid
  createdAt  DateTime @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  role roles @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model working_days {
  id String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  companyId String @db.Uuid
  approvedBy String @db.Uuid
  workedTime String @db.VarChar(40)
  is_approved Boolean @default(true)
  createdAt  DateTime @default(now()) 
  updatedAt  DateTime @updatedAt 
  entries entries[]

  user       users @relation("WorkingDaysUser", fields: [userId], references: [id], onDelete: Cascade)
  approver   users @relation("WorkingDaysApprover", fields: [approvedBy], references: [id], onDelete: Cascade)
}

model entries { 
  id String @id @default(uuid()) @db.Uuid
  workingDaysId String @db.Uuid
  entryTime DateTime
  latitude    String @db.VarChar(25)
  longitude   String @db.VarChar(25)
  
  workingDay working_days @relation(fields: [workingDaysId], references: [id], onDelete: Cascade)
}